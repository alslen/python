
[exam04_selenium01.py]
- [exam03_selenium03.py]에서 BeautifulSoup()을 사용했던 것을 selenium을 이용해서 값 추출 할 것임.

from selenium import webdriver as wd  
from selenium.webdriver.common.by import By  
import time 
import matplotlib as mpl
import matplotlib.pyplot as plt


path = 'D:\\chromedriver_win32\\chromedriver.exe'
options = wd.ChromeOptions()
options.add_experimental_option('detach', True)
driver = wd.Chrome(path, options=options)
driver.get('https://www.youtube.com/c/paikscuisine/videos') # 드라이버를 통해 url에 접근

# all_videos = driver.find_elements(By.ID, "dismissible")  # id값이 dismissible인 모든 것(요소)을 찾음
all_videos = driver.find_elements(By.CSS_SELECTOR, "#dismissible")  # CSS_SELECTOR : css표현으로 id값(#사용)을 가져옴
print(all_videos)

time.sleep(2) #2초 기다림

# 제목, 재생시간, 조회수
datas = []
for video in all_videos:
    title = video.find_element(By.ID, "video-title").text
    video_time = video.find_element(By.CSS_SELECTOR, ".style-scope ytd-thumbnail-overlay-time-status-renderer").text.strip()  # 재생시간
    # video_num = video.find_element(By.CLASS_NAME, "inline-metadata-item style-scope ytd-video-meta-block").text.strip() # 조회수
    video_num=video.find_element(By.XPATH, ' //*[@id="metadata-line"]/span[1]').text  # XPath를 이용해서 조회수 크롤링
    datas.append([title, video_time, video_num])
print(datas)

# 조회수별로 나누기 위해 dictionary를 사용함.
youtube_dic = {'100만이상' : 0, '50만이상' : 0, '10만이상' : 0}
for item in datas:
    item = float(str(item).split('조회수')[1].split('만회')[0].strip())
    if item >= 100:
        youtube_dic['100만이상'] += 1
    elif item >= 50:
        youtube_dic['50만이상'] += 1
    elif item >= 10:
        youtube_dic['10만이상'] += 1
print(youtube_dic)

# 그래프 그리기
font_name = mpl.font_manager.FontProperties(fname='c:/Windows/fonts/malgun.ttf').get_name()
mpl.rc('font', family=font_name)

figure = plt.figure()
axes = figure.add_subplot(111)
axes.pie(youtube_dic.values(), labels=youtube_dic.keys(), autopct='%.1f%%')
plt.show()



[exam04_selenium02.py]
- execute_script()을 사용하기 위한 예제

from selenium import webdriver as wd
from selenium.webdriver.common.by import By

path = 'D:\\chromedriver_win32\\chromedriver.exe'
options = wd.ChromeOptions()
options.add_experimental_option('detach', True)
driver = wd.Chrome(path, options=options)
# driver.get('https://google.com') # 드라이버를 통해 url에 접근
r = driver.execute_script('return 100*50') # execute_script(자바스크립트로 실행하고자 하는 것 쓰기) : 자바스크립트를 실행하기 위해 사용
print(r)



[exam04_selenium03.py]
- [exam04_selenium01.py]에서 값이 화면에 보이는 것만 크롤링 되기 때문에 스크롤를 해줘야 스크롤된 값들이 크롤링 됨.
from selenium import webdriver as wd  
from selenium.webdriver.common.by import By  
import time 
from selenium.webdriver.common.keys import Keys


path = 'D:\\chromedriver_win32\\chromedriver.exe'
options = wd.ChromeOptions()
options.add_experimental_option('detach', True)
driver = wd.Chrome(path, options=options)
driver.get('https://www.youtube.com/c/paikscuisine/videos') # 드라이버를 통해 url에 접근

# all_videos = driver.find_elements(By.ID, "dismissible")  # id값이 dismissible인 모든 것(요소)을 찾음
all_videos = driver.find_elements(By.CSS_SELECTOR, "#dismissible")  # CSS_SELECTOR : css표현으로 id값(#사용)을 가져옴

# selenium는 스크롤을 내려야지만 값이 들어가기 때문에 
body_tag = driver.find_element(By.TAG_NAME, 'body')
# print(body_tag) # 객체값 출력
body_tag.send_keys(Keys.END) # 스크롤이 1번 진행됨.

# 화면의 길이 만큼 스크롤을 해줘야하기 때문에 
# 화면 길이 확인하기
# document.documentElement.scrollHeight : 화면길이
print(driver.execute_script('return document.documentElement.scrollHeight')) # 자바 스크립트에서 제공해주는 scrollHeight는 화면길이를 알려줌
# driver.execute_script('searchBarModule.CklickForSearch()')  # 자바스크립트의 함수 호출하는 방법
  ===>  <a href='~' onClick='searchBarModule.CklickForSearch()'/> 

# 무한루프 돔ㅠㅠㅠㅠㅠ
while True:  
   last_height =  driver.execute_script('return document.documentElement.scrollHeight')  
   print('last_height : ', last_height)
   # 10번 스크롤하기
   for i in range(10):
    body_tag.send_keys(Keys.END)
    time.sleep(1) # 스크롤 할 때 데이터가 로드 되어야하기 때문에 기다림
    new_height = driver.execute_script('return document.documentElement.scrollHeight') # 스크롤 될때마다 화면길이가 달라지기 때문에 선언
    print('new_height : ', new_height)

    if last_height == new_height:
        print('화면길이 같아서 반복 종료')
        break
    print('='*100)



[exam04_interpark.py]

from selenium import webdriver as wd  
from selenium.webdriver.common.by import By  
import time 
from selenium.webdriver.common.keys import Keys

path = 'D:\\chromedriver_win32\\chromedriver.exe'
options = wd.ChromeOptions()
options.add_experimental_option('detach', True)
driver = wd.Chrome(path, options=options)
driver.get('https://tour.interpark.com/?mbn=tour&mln=tour') # 드라이버를 통해 url에 접근

# 제주도를 검색
driver.find_element(By.ID, 'txtHeaderInput').send_keys('제주도')
driver.find_element(By.ID, 'btnHeaderInput').click()

...





[exam04_lotte.py]  : 내가 한 예제(롯데시네마 현재 상영작의 제목 예매율 평점을 크롤링)
from selenium import webdriver as wd  
from selenium.webdriver.common.by import By  
import matplotlib as mpl
import matplotlib.pyplot as plt

path = 'D:\\chromedriver_win32\\chromedriver.exe'
options = wd.ChromeOptions()
options.add_experimental_option('detach', True)
driver = wd.Chrome(path, options=options)
driver.get('https://www.lottecinema.co.kr/NLCHS/Movie/List?flag=1') # 드라이버를 통해 url에 접근

# 롯데시네마 영화 제목 / 예매율 / 조회수 크롤링
movie_ul = driver.find_element(By.CLASS_NAME, 'movie_list')
movie_li = movie_ul.find_elements(By.CLASS_NAME, 'screen_add_box')

movie_list = []
lst = []
for i in movie_li:
    title = i.find_elements(By.CLASS_NAME, 'tit_info')
    views = i.find_elements(By.CLASS_NAME, 'rate_info')
    stars = i.find_elements(By.CLASS_NAME, 'star_info')

    for t, v, s in zip(title, views, stars):
        v = v.text.split("예매율")[1]
        movie_list.append([t.text, v, s.text])
print(movie_list)

# 평점으로 나눔
movie_dic = {'9.5이상' : 0, '9.0이상' : 0, '8.0이상' : 0}
for item in movie_list:
     item = float(item[2])
     if item >= 9.5:
        movie_dic['9.5이상'] += 1
     elif item >= 9.0:
        movie_dic['9.0이상'] += 1
     elif item >= 8.0:
        movie_dic['8.0이상'] += 1

print(movie_dic)

font_name = mpl.font_manager.FontProperties(fname='c:/Windows/fonts/malgun.ttf').get_name()
mpl.rc('font', family=font_name)

figure = plt.figure()
axes = figure.add_subplot(111)
axes.pie(movie_dic.values(), labels=movie_dic.keys(), autopct='%.1f%%')
plt.show()



- DB에 있는 값들을 크롤링하기 위해 사전 준비
 1.해당 작업환경 cmd창에서 "pip install pymysql" 입력
 2. workbench에서 'big9_db' 스키마 생성
 3. big9_db에서 forecast 테이블 생성
 (기본키인 num에 반드시 AI를 해줘야함)
 

[exam04_db01.py]
- DB에서 값을 select해서 DB에 있는 날짜보다 최신날짜면 insert시켰음.

import requests
from bs4 import BeautifulSoup
import pymysql  # DB를 사용하기 위해 import함

dbURL = "127.0.0.1"
dbPort = 3306
dbUser = "root"
dbPass = "1234"

# 1. DB 연결
# db = '스키마이름'
conn = pymysql.connect(host=dbURL, port=dbPort, user=dbUser, passwd=dbPass, db='big9_db', charset='utf8',
                        use_unicode=True)

# DB에 값 insert하기위한 질의문
insert_weather = "insert into forecast(city, tmef, wf, tmn, tmx) values(%s,%s,%s,%s,%s)" # 문자열의 값을 insert하기 위해 %s를 사용


# DB에 값 추가하기 위해 크롤링을 함
req = requests.get('https://www.weather.go.kr/weather/forecast/mid-term-rss3.jsp?stnId=108')
html = req.text
soup = BeautifulSoup(html, 'lxml')
# print(soup.find_all('location'))

# DB에 있는 값은 더 이상 추가하지 못하도록 하기 위해 select 먼저 실행
select_data = "select tmef from forecast order by tmef desc limit 1"  # 내림차순 정렬해서 첫번째 값만 가져옴
cur = conn.cursor()
cur.execute(select_data)
# select한 결과를 가져오기 위해 사용하는 메서드 : fetchone()(한개의 값만 가져옴), fetchall()(여러개의 값을 가져옴)
last_date = cur.fetchone()  # db에 있는 최신날짜
print("type(last_date) : ", type(last_date))
print("last_date : ", last_date)

weather = {}
for i in soup.find_all('location'):
    weather[i.find('city').text] = []  # dic은 키 값으로 value값을 출력해줌
    for j in i.find_all('data'):
        tmp = []
        # select할 값이 없거나 최신날짜를 가진 데이터면 append시킴
        if (last_date is None) or (last_date[0] < j.find('tmef').text):  # 크롤링한 날짜가 최신 날짜이면 append시킴()
            tmp.append(j.find('tmef').text)  # 화면상에서는 tmEf로 보이지만 실제로는 tmef로 사용되었음
            tmp.append(j.find('wf').text)
            tmp.append(j.find('tmn').text)
            tmp.append(j.find('tmx').text)
            # print(tmp)
            weather[i.find('city').text].append(tmp)

print(weather)
 # 1. 연결 : connect
 # 2. 데이터베이스 작업을 위한 객체 cursor()
 # 3. 질의문 전달 : execute()
 # 4. 실행 : commit()

# dict에 있는 내용을 forecast 테이블에 저장
for i in weather:
    for j in weather[i]:
       cur = conn.cursor() # cursor 객체 생성
       cur.execute(insert_weather, (i, j[0], j[1], j[2],j[3]))  # insert할 때 어떤 값을 insert할지 명시해줘야함.
       conn.commit()  
	   

	   
[exam04_db2.py]
import requests
from bs4 import BeautifulSoup
import pymysql  # DB를 사용하기 위해 import함

dbURL = "127.0.0.1"
dbPort = 3306
dbUser = "root"
dbPass = "1234"

# 1. DB 연결
# db = '스키마이름'
conn = pymysql.connect(host=dbURL, port=dbPort, user=dbUser, passwd=dbPass, db='big9_db', charset='utf8',
                        use_unicode=True)

# 부산의 날씨만 추출
# select_busan = 'select * from forecast where city like "%부산%"'
select_data = "select * from forecast where city='부산' order by tmef desc"
cur = conn.cursor()  # cursor 객체 생성
cur.execute(select_data)  # 질의문
result_busan = cur.fetchall()
print(result_busan)

# 부산의 최저기온, 최고기온(내가 한 코드)
select_temp = "select min(tmn), max(tmx) from forecast where city='부산'"
cur.execute(select_temp)
result_busanTemp = cur.fetchone()
print("부산 최저기온 : ", result_busanTemp[0])
print("부산 최고기온 : ", result_busanTemp[1])

#############################
print('######')
result = []
for i in result_busan:  # 부산 날씨
    # print(i)
    result.append([i[2],i[4],i[5]])
print(result)





[exam04_db03_busan_gf.py]
- 날씨정보에 대해서 그래프 그리기

import pymysql  # DB를 사용하기 위해 import함
import matplotlib as mpl  # 그래프 크기, 폰트 크기 지정하는 라이브러리
import matplotlib.pyplot as plt

dbURL = "127.0.0.1"
dbPort = 3306
dbUser = "root"
dbPass = "1234"

# 1. DB 연결
# db = '스키마이름'
conn = pymysql.connect(host=dbURL, port=dbPort, user=dbUser, passwd=dbPass, db='big9_db', charset='utf8',
                        use_unicode=True)

# 부산 날씨(날짜에 대한 최저기온과 최고기온)를 그래프로 생성
select_data = "select * from forecast where city='부산'"
cur = conn.cursor()
cur.execute(select_data)
result_busan = cur.fetchall()

min=[]  # 최저 기온
max=[]  # 최고 기온
date = []  # 날짜
for i in result_busan:
    min.append(int(i[4]))
    max.append(int(i[5]))
    # date.append(i[2])
    date.append(i[2].split('-')[2])
    # 12:00인 것만 그래프에 그리기 위해 사용
    # if i[2].split(" ")[1] == '12:00':
    #     min.append(int(i[5]))
    #     max.append(int(i[4]))
    #     date.append(i[2])

# 폰트 지정(한글을 사용하기 위해 지정)
font_name = mpl.font_manager.FontProperties(fname='c:/Windows/fonts/malgun.ttf').get_name()
mpl.rc('font', family=font_name)

# 그래프
plt.figure(figsize=(10,6))  # 크기
plt.plot(date, min, label='최저기온')  # plot(x좌표, y좌표)
plt.plot(date, max, label='최고기온')
plt.title('2023/2/23 ~ 2023/3/2 부산 최고 최저 기온')
plt.legend()

plt.show()

# 날씨 정보와 날씨 정보 개수를 알기 위해서 group by를 사용
select_data1 = "select wf, count(*) from forecast where city='부산' group by wf"
cur.execute(select_data1)
result_wf = cur.fetchall()
wfData = []
wfDataCount = []
for i in result_wf:
    wfData.append(i[0])
    wfDataCount.append(i[1])

plt.bar(wfData, wfDataCount, color='green')
plt.title('부산 날씨 정보')
plt.show()

figure = plt.figure()
axes = figure.add_subplot(111)
axes.pie(wfDataCount, labels=wfData, autopct='%.1f%%')
plt.show()


##### 내가 짠 코드 #####
# # wf(구름많음, 흐림, 맑음)에 대한 막대 그래프와 원형 그래프 생성
# select_wf = 'select wf from forecast where city="부산"'
# cur.execute(select_wf)
# result_wf = cur.fetchall()
# # print(result_wf)

# wf_dic = {'구름많음' : 0, '흐림' : 0, '맑음' : 0}
# for i in result_wf:
#     if i[0] == '구름많음':
#         wf_dic['구름많음'] += 1
#     elif i[0] == '흐림':
#         wf_dic['흐림'] += 1
#     elif i[0] == '맑음':
#         wf_dic['맑음'] += 1
# print(wf_dic)

# # 막대 그래프 
# plt.bar(wf_dic.keys(), wf_dic.values())  
# plt.show()

# # 원형 그래프
# figure = plt.figure()
# axes = figure.add_subplot(111)
# axes.pie(wf_dic.values(), labels=wf_dic.keys(), autopct='%.1f%%')
# plt.show()


















 







 





